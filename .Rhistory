m + geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
m + geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))
ggmap(dc)+geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
dc <- get_map(location="Washington D.C.",zoom=14)
ggmap(dc)+geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
dc <- get_map(location="Washington D.C.",zoom=11)
ggmap(dc)+geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
dc <- get_map(location="Washington D.C.",zoom=12)
ggmap(dc)+geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
m <- leaflet() %>% setView(lng = -77.0000, lat = 38.0000, zoom = 12)
m
m <- leaflet()
m
install.packages('leaflet',dependencies = TRUE)
install.packages("leaflet", dependencies = TRUE)
m <- leaflet()
library(leaflet)
m <- leaflet()
m
shiny::runApp()
runApp()
shiny::runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
runApp()
ggmap(dc)+geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
#DC Crime Data
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(geojsonio)
dccrimejson <- geojson_read(http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson)
dccrimejson <- geojson_read('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
library(xml2)
xml2::read_xml(dccrimejson)
library(jsonlite)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
json_file <- lapply(dccrimejsonlite, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
dc_crime_json <- dccrimejsonlite$features
dc_crime_json <- dccrimejsonlite$features$properties
cbind(dc_crime_json$BLOCKXCOORD,dc_crime_json$BLOCKYCOORD)
runApp()
runApp()
runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
runApp()
View(dc_crime_json)
dc_crime_json$BLOCKXCOORD <- dc_crime_json$BLOCKXCOORD/10000
dc_crime_json$BLOCKYCOORD <- dc_crime_json$BLOCKYCOORD/10000
runApp()
runApp()
dc_crime_json$BLOCKXCOORD <- dc_crime_json$BLOCKXCOORD/100000
dc_crime_json$BLOCKYCOORD <- dc_crime_json$BLOCKYCOORD/100000
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- dccrimejsonlite$features$properties
runApp()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- dccrimejsonlite$features$properties
runApp()
147037/2000
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- dccrimejsonlite$features$properties
dc_crime_json$BLOCKXCOORD <- dc_crime_json$BLOCKXCOORD/1000
dc_crime_json$BLOCKYCOORD <- dc_crime_json$BLOCKYCOORD/2000
runApp()
runApp()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- dccrimejsonlite$features$properties
dc_crime_json$BLOCKXCOORD <- dc_crime_json$BLOCKXCOORD/100000
dc_crime_json$BLOCKYCOORD <- dc_crime_json$BLOCKYCOORD/2000
runApp()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- dccrimejsonlite$features$properties
dc_crime_json$BLOCKXCOORD <- dc_crime_json$BLOCKXCOORD/10000
dc_crime_json$BLOCKYCOORD <- dc_crime_json$BLOCKYCOORD/2000
runApp()
runApp()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- dccrimejsonlite$features$properties
dc_crime_json$BLOCKXCOORD <- dc_crime_json$BLOCKXCOORD/10000
dc_crime_json$BLOCKYCOORD <- -dc_crime_json$BLOCKYCOORD/2000
runApp()
runApp()
dccrimejsonlite <- fromJSON('https://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/CDW_Feeds/MapServer/8/query?outFields=*&where=1%3D1')
View(dc_crime_json)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
View(dc_crime_json)
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry$coordinates)
View(dc_crime_json)
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
runApp()
View(dc_crime_json)
library(tidyr)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")
View(dc_crime_clean)
dc_crime_clean$X <- grep("c(","",dc_crime_clean$X)
dc_crime_clean$X <- grep("c\\(","",dc_crime_clean$X)
dc_crime_clean$X <- grep("\\c(","",dc_crime_clean$X)
dc_crime_clean$X <- gsub("\\c(","",dc_crime_clean$X)
dc_crime_clean$X <- gsub("c\\(","",dc_crime_clean$X)
View(dc_crime_clean)
dc_crime_clean$Y <- gsub("\\)","",dc_crime_clean$Y)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
offenses <- distinct(dc_crime_json$OFFENSE)
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(curl)
offenses <- distinct(dc_crime_json$OFFENSE)
offenses <- distinct(select(dc_crime_json,OFFENSE))
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fil_set <- dc_crime_clean
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
View(dc_crime_clean)
dc_crime_clean$Date <- as.Date(as.character(dc_crime_clean$REPORTDATETIME), "%d-%b-%y")
library(tidyr)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
dc_crime_clean$Date <- as.Date(as.character(dc_crime_clean$Date), "%d-%b-%y")
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
dc_crime_clean$Date2 <- as.Date(as.character(dc_crime_clean$Date), "%y-%d-%b")
dc_crime_clean$Date2 <- as.Date(dc_crime_clean$Date, "%y-%d-%b")
dc_crime_clean$Date2 <- as.Date(dc_crime_clean$Date, "%Y-%d-%b")
ggmap(dc)+geom_point(data=crimesdc,alpha=1/4,aes(x=X,y=Y,color=OFFENSE))+scale_color_discrete()
shiny::runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(tidyr)
library(curl)
dc_crime_clean$Date2 <- as.Date(dc_crime_clean$Date)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
View(dc_crime_clean)
shiny::runApp()
View(dc_crime_clean)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
##  Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
library(tidyr)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$Date2 <- as.Date(dc_crime_clean$Date)
View(dc_crime_clean)
runApp()
runApp()
runApp()
shiny::runApp()
library(jsonlite)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Get distinct Offenses for shiny input
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
##  Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
library(tidyr)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$Date2 <- as.Date(dc_crime_clean$Date)
by_offense <- group_by(dc_crime_clean,OFFENSE,SHIFT)
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
shiny::runApp()
by_Date <- group_by(dc_crime_clean,DateClean,OFFENSE,SHIFT)
bydate <- group_by(dc_crime_clean,DateClean,OFFENSE,SHIFT)
crimedc_bydate <- summarise(bydate,
count=n())
View(crimedc_bydate)
library(ggvis)
View(crimedc_bydate)
View(dc_crime_clean)
View(dc_crime_json)
shiny::runApp()
runApp()
runApp()
runApp()
View(crimedc_bydate)
install.packages('hmd')
install.packages('hmd')
install.packages('hms')
devtools::install_github("krlmlr/hms")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(curl)
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
library(Rcurl)
install.packages('curl')
install.packages("curl")
shiny::runApp()
runApp()
runApp()
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
```{r setup, include=FALSE}
```
title: "Mapping DC Crime with R and Leaflet"
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
summary(cars)
# Chunk 3: pressure
plot(pressure)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
summary(cars)
# Chunk 3: pressure
plot(pressure)
library(rmarkdown)
runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
View(dc_crime_clean)
install.packages('rgeos')
shiny::runApp()
---
title: "Mapping DC Crime with R and Leaflet"
author: "Neil Kutty"
date: "April 3, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Getting and cleaning the data
The dataset is available in downloadable or GeoJSON format. I'm going with JSON so that the shiny app can be standalone without additional need for data management.
Several libraries are required for this project. use the `install.packages('packagename')` command to install the libraries/packages before attempting the code to load them below
```{r libraries,eval=FALSE}
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
```
Retrieval of the data is bit *chunky* at the moment, utilizing the ```jsonlite``` library and some cleanup code we create a usable dataset below:
```{r json,eval=FALSE}
## Retrieve the data in JSON format from opendata.dc.gov using fromJson()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() to access the list elements and create dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
bydate <- group_by(dc_crime_clean,DateClean,OFFENSE,SHIFT)
crimedc_bydate <- summarise(bydate,
count=n())
```
In the above, the data is retrieved using the ```fromJSON()``` function, and the columns are retrieved using the ```cbind()``` function.
The latitude and longitude columns are cleaned using the ```separate()``` function from library ```tidyr``` and RegEx to remove erroneous characters from the columns.
-- in dev...
library(shiny)
library(shinythemes)
library(leaflet)
title: "Mapping DC Crime with R and Leaflet"
---
title: "Mapping DC Crime with R and Leaflet"
author: "Neil Kutty"
date: "April 3, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Getting and cleaning the data
The dataset is available in downloadable or GeoJSON format. I'm going with JSON so that the shiny app can be standalone without additional need for data management.
Several libraries are required for this project. use the `install.packages('packagename')` command to install the libraries/packages before attempting the code to load them below
```{r libraries,eval=FALSE}
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
```
Retrieval of the data is bit *chunky* at the moment, utilizing the ```jsonlite``` library and some cleanup code we create a usable dataset below:
```{r json,eval=FALSE}
## Retrieve the data in JSON format from opendata.dc.gov using fromJson()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() to access the list elements and create dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
bydate <- group_by(dc_crime_clean,DateClean,OFFENSE,SHIFT)
crimedc_bydate <- summarise(bydate,
count=n())
```
In the above, the data is retrieved using the ```fromJSON()``` function, and the columns are retrieved using the ```cbind()``` function.
The latitude and longitude columns are cleaned using the ```separate()``` function from library ```tidyr``` and RegEx to remove erroneous characters from the columns.
-- in dev...
---
title: "Mapping DC Crime with R and Leaflet"
author: "Neil Kutty"
date: "April 3, 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Getting and cleaning the data
The dataset is available in downloadable or GeoJSON format. I'm going with JSON so that the shiny app can be standalone without additional need for data management.
Several libraries are required for this project. use the `install.packages('packagename')` command to install the libraries/packages before attempting the code to load them below
```{r libraries,eval=FALSE}
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
```
Retrieval of the data is bit *chunky* at the moment, utilizing the ```jsonlite``` library and some cleanup code we create a usable dataset below:
```{r json,eval=FALSE}
## Retrieve the data in JSON format from opendata.dc.gov using fromJson()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() to access the list elements and create dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
bydate <- group_by(dc_crime_clean,DateClean,OFFENSE,SHIFT)
crimedc_bydate <- summarise(bydate,
count=n())
```
In the above, the data is retrieved using the ```fromJSON()``` function, and the columns are retrieved using the ```cbind()``` function.
The latitude and longitude columns are cleaned using the ```separate()``` function from library ```tidyr``` and RegEx to remove erroneous characters from the columns.
#in dev...
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
