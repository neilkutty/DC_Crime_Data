runApp()
shiny::runApp()
shiny::runApp()
?library
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?element_text
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
day <- as.data.frame(table(filterData()$Weekday))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
day <- filterData %>%
select(Weekday, OFFENSE) %>%
group_by(Weekday) %>%
summarize(count = n_count())
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
head(dc_crime_clean)
class(dc_crime_clean$REPORTDATETIME)
x <- strptime(dc_crime_clean$REPORTDATETIME[1],%m/%d/%Y %I:%M:%S %p")
x <- strptime(dc_crime_clean$REPORTDATETIME[1],%m/%d/%Y %I:%M:%S")
x <- strptime(dc_crime_clean$REPORTDATETIME[1],"%m/%d/%Y %I:%M:%S %p")
x
dc_crime_clean$REPORTDATETIME[1]
as.date(dc_crime_clean$REPORTDATETIME[1])
as.Date(dc_crime_clean$REPORTDATETIME)
as.POSIXct(dc_crime_clean$REPORTDATETIME)
as.POSIXct(dc_crime_clean$Time)
strptime(dc_crime_clean$Time,"%I:%M %p")
strptime(dc_crime_clean$REPORTDATETIME,"%I:%M %p")
class(dc_crime_clean$Time)
as.POSIXlt(dc_crime_clean$Time)
library(lubridate)
parse_date_time(dc_crime_clean$REPORTDATETIME[1], orders="ymd hms")
parse_date_time(dc_crime_clean$REPORTDATETIME[3], orders="ymd hms")
parse_date_time(dc_crime_clean$REPORTDATETIME[3], orders="ymd hms", tz="America/New York")
parse_date_time(dc_crime_clean$REPORTDATETIME[3], orders="ymd hms", tz="America/New_York")
shiny::runApp()
x
x <- strptime(dc_crime_clean$REPORTDATETIME,format="%d/%m/%Y %I:%M:%S")
x
x <- as.POSIXct(dc_crime_clean$REPORTDATETIME,format="%d/%m/%Y %I:%M:%S")
x
x <- as.Date(dc_crime_clean$REPORTDATETIME)
x
library(lubridate)
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1])
x
?ymd_hms
?ymd_hms
library(lubridate)
?ymd_hms
x <- parse_date_time(dc_crime_clean$REPORTDATETIME[1],'%m/%d/%Y %I:%M:%S %p')
x
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1],'%m/%d/%Y %I:%M:%S %p')
View(dc_crime_clean)
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1],'%Y/%d/%m %I:%M:%S %p')
x
x <- as.POSIXct(dc_crime_clean$REPORTDATETIME[1],"%d/%m/%Y %I:%M:%S %p")
x
x <- strptime(dc_crime_clean$REPORTDATETIME[1],"%d/%m/%Y %I:%M:%S %p")
x
x <- strptime(as.Date(dc_crime_clean$REPORTDATETIME[1]),"%d/%m/%Y %I:%M:%S %p")
x
x <- strptime(dc_crime_clean$Time[1],"%I:%M:%S %p")
x
x <- as.POSIXct(dc_crime_clean$Time[1],"%I:%M:%S %p")
x
x <- hms(dc_crime_clean$Time[1])
x
x <- ymd_hms(dc_crime_clean$Time[1])
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1])
x
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='Americas/New_York')
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='America/New_York')
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='Americas/New_York')
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='America/New_York')
x
class(x)
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='New_York')
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='Eastern')
x <- ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='America/New_York')
shiny::runApp()
runApp()
runApp()
View(dc_crime_clean)
table(filterData$SHIFT)
table(dc_crime_clean$SHIFT)
runApp()
Shift <- as.data.frame(table(filterData()$SHIFT))
runApp()
runApp()
runApp()
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",", remove = FALSE)%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)))%>%
mutate(DATETIME = ymd_hms(dc_crime_clean$REPORTDATETIME[1], tz='America/New_York'))%>%
mutate(DateClean = as.Date(Date))
class(dc_crime_clean$Date)
runApp()
runApp()
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",", remove = FALSE)%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)))%>%
mutate(DATETIME = ymd_hms(dc_crime_clean$REPORTDATETIME, tz='America/New_York'))%>%
mutate(DateClean = as.Date(Date))
runApp()
runApp()
shiny::runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(dplyr)
combo <- dc_crime_clean %>%
select(OFFENSE,Weekday) %>%
sumamrize(Count = n())
combo <- dc_crime_clean %>%
select(OFFENSE,Weekday) %>%
summarize(Count = n())
View(combo)
combo <- dc_crime_clean %>%
select(OFFENSE,Weekday) %>%
group_by(OFFENSE,Weekday) %>%
summarize(Count = n())
View(combo)
library(ggplot2)
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday)) +
geom_point(stat = "identity")
cplot
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday)) +
geom_point(stat = combo$Count)
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday)) +
geom_point()
cplot
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday)) +
geom_point(stat = 'bin')
cplot
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday,size=count))
cplot
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday, size=Count))
cplot
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday, size=Count, color=OFFENSE))+
geom_point()
cplot
cplot <- ggplot(combo, aes(x=OFFENSE, y=Weekday, size=Count, color=OFFENSE))+
geom_dotplot()
cplot
View(dc_crime_clean)
class(dc_crime_clean$DATETIME)
ts <- dc_crime_clean %>%
select(DATETIME,OFFENSE) %>%
group_by(DATETIME, OFFENSE) %>%
summarize(Count = n())
View(ts)
?facet_grid
timeplot <- ggplot(ts, aes(x=DATETIME,y=Count))+
geom_bar()+
facet_grid(.~OFFENSE)
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DATETIME))+
geom_bar()+
facet_grid(.~OFFENSE)
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DATETIME))+
geom_bar(stat=ts$Count)+
facet_grid(.~OFFENSE)
timeplot <- ggplot(ts, aes(x=DATETIME,y=Count))+
geom_bar(stat='identity')+
facet_grid(.~OFFENSE)
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_bar(stat='identity')+
facet_grid(.~OFFENSE)
plot(timeplot)
ts <- dc_crime_clean %>%
select(DateClean,OFFENSE) %>%
group_by(DateClean, OFFENSE) %>%
summarize(Count = n())
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_bar(stat='identity')+
facet_grid(.~OFFENSE)
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_bar(stat='identity')+
facet_grid(OFFENSE~.)
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_bar(stat='identity')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE))+
geom_bar(stat='identity')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE,fill=OFFENSE))+
geom_bar(stat='identity')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE,fill=OFFENSE))+
geom_bar(stat='identity')+
geom_text(aes(label = ts$Count))
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE,fill=OFFENSE))+
geom_bar(stat='identity')+
geom_text(aes(label = ts$Count, color='black'))
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE,fill=OFFENSE))+
geom_bar(stat='identity')+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE))+
geom_line(stat="identity")+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count,color=OFFENSE))+
geom_line(stat="identity")+
geom_text(aes(label = ts$Count),color='black')+
scale_y_log10()
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_line(stat="identity")+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() combine the list elements and create a dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Get distinct Offenses for shiny input
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
## Seperate and clean lat/long columns but keep original datetime column
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",", remove = FALSE)%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)))%>%
mutate(DATETIME = ymd_hms(REPORTDATETIME, tz='America/New_York'))%>%
mutate(DateClean = as.Date(Date))
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
ts <- dc_crime_clean %>%
select(DateClean,OFFENSE) %>%
group_by(DateClean, OFFENSE) %>%
summarize(Count = n())
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_line(stat="identity")+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_line()+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
ts <- dc_crime_clean %>%
select(DateClean) %>%
group_by(DateClean) %>%
summarize(Count = n())
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_smooth()+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_line()+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
timeplot <- ggplot(ts, aes(x=DateClean,y=Count))+
geom_line()+
geom_smooth()+
geom_text(aes(label = ts$Count),color='black')
plot(timeplot)
View(dc_crime_clean)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X1", "Y1"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date1","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)),
DATETIME = ymd_hms(REPORTDATETIME, tz='America/New_York'),
Date = as.Date(Date1),
X <- as.numeric(gsub("c\\(","",X1)),
Y <- as.numeric(gsub("\\)","",Y1)))
runApp()
View(dc_crime_clean)
runApp()
View(dc_crime_clean)
shiny::runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
input$timeCntrl[min]
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
class(input$timeCntrl)
runApp()
runApp()
runApp()
runApp()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() combine the list elements and create a dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Get distinct Offenses for shiny input
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
## Seperate and clean lat/long columns but keep original datetime column
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)),
DATETIME = ymd_hms(REPORTDATETIME, tz='America/New_York'),
Date = as.Date(Date),
X = as.numeric(gsub("c\\(","",X)),
Y = as.numeric(gsub("\\)","",Y)))
View(dc_crime_clean)
table(dc_crime_clean$NEIGHBORHOODCLUSTER)
levels(dc_crime_clean$NEIGHBORHOODCLUSTER)
distinct(dc_crime_clean$NEIGHBORHOODCLUSTER)
unique(dc_crime_clean$NEIGHBORHOODCLUSTER)
plot(table(dc_crime_clean$NEIGHBORHOODCLUSTER))
dchoods <- readOGR("dchoods.kml", "dchoods", encoding="utf-8" )
library(rgdal)
dchoods <- readOGR("dchoods.kml", "dchoods", encoding="utf-8" )
dchoods <- readOGR("dchoods.kml", "Washington DC neighborhoods", encoding="utf-8" )
dchoods <- readOGR("dchoods.kml")
dchoods <- readOGR("dchoods.kml", "DC neighborhood boundaries")
library(lubridate)
?fromJSON
library(jsonlite)
?fromJSON
str(dccrimejsonlite)
dccrimejsonlite[[1]]
dccrimejsonlite[1
]
dccrimejsonlite$features
# Chunk 1: setup
library(dplyr)
library(tidyr)
library(jsonlite)
library(lubridate)
library(leaflet)
# Chunk 1: setup
library(dplyr)
library(tidyr)
library(jsonlite)
library(lubridate)
library(leaflet)
# Chunk 1: setup
library(dplyr)
library(tidyr)
library(jsonlite)
library(lubridate)
library(leaflet)
# Fig. 1
########---------------------------------------------------------------------#>>>
## Retrieve the data in JSON format from opendata.dc.gov using fromJson()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() combine the list elements and create a dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Seperate and clean lat/long columns but keep original datetime column
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)),
DATETIME = ymd_hms(REPORTDATETIME, tz='America/New_York'),
Date = as.Date(Date),
X = as.numeric(gsub("c\\(","",X)),
Y = as.numeric(gsub("\\)","",Y)))
head(dccrimejsonlite)
head(dccrimejsonlite)[1:5]
dccrimejsonlite$type
dccrimejsonlite[1]
dccrimejsonlite[2]
head(dccrimejsonlite$features)
crimejson <- dccrimejsonlite$features
View(crimejson)
crimejson <- as.data.frame(dccrimejsonlite$features)
library(ggplot2)
library(leaflet)
library(dplyr)
library(tidyr)
library(jsonlite)
library(curl)
library(lubridate)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)),
DATETIME = strptime(d, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ"),
Date = as.Date(Date),
X = as.numeric(gsub("c\\(","",X)),
Y = as.numeric(gsub("\\)","",Y)))
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)),
DATETIME = strptime(REPORTDATETIME, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ"),
Date = as.Date(Date),
X = as.numeric(gsub("c\\(","",X)),
Y = as.numeric(gsub("\\)","",Y)))
dc_crime_clean$DATETIME = strptime(REPORTDATETIME, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ")
dc_crime_clean$DATETIME = strptime(dc_crime_clean$REPORTDATETIME, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ")
View(dc_crime_clean)
shiny::runApp()
dc_crime_clean$DATETIME = as.POSIXct(strptime(dc_crime_clean$REPORTDATETIME, tz = "UTC", "%Y-%m-%dT%H:%M:%OSZ"))
runApp()
str(dc_crime_clean)
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points(),
popup = paste0("<strong>Report Date: </strong>",
dc_crime_clean$DATETIME,
"<br><strong>Offense: </strong>",
dc_crime_clean$OFFENSE,
"<br><strong>method: </strong>",
dc_crime_clean$METHOD,
"<br><strong>shift: </strong>",
dc_crime_clean$SHIFT,
"<br><strong>blocksite address: </strong><br>",
dc_crime_clean$BLOCKSITEADDRESS
),
clusterOptions = markerClusterOptions()
) %>%
addPolygons(data = dchoods,
fillOpacity = 0.2,
color = 'red',
weight = 2.0
)
runApp()
dchoods$Name
hood <- cbind(dchoods$Name,dchoods$Description)
hood
rm(hood)
