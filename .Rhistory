library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
# jsonlite
## AUTOMATION OF DC Crime Last 30 Days Data
########---------------------------------------------------------------------#>>>
## Retrieve the data in JSON format from opendata.dc.gov using fromJson()
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() to access the list elements and create dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Get distinct Offenses for shiny input
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
## Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
bydate <- group_by(dc_crime_clean,DateClean,OFFENSE,SHIFT)
crimedc_bydate <- summarise(bydate,
count=n())
########---------------------------------------------------------------------#>>>
function(input, output, session) {
points <- eventReactive(input$reset, {
cbind(dc_crime_clean$X,dc_crime_clean$Y)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("OpenStreetMap.Mapnik",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points(),popup = paste0("<strong>Report Date: </strong>",
dc_crime_clean$DateClean,
"<br><strong>Offense: </strong>",
dc_crime_clean$OFFENSE,
"<br><strong>method: </strong>",
dc_crime_clean$METHOD,
"<br><strong>shift:</strong>",
dc_crime_clean$SHIFT,
"<br><strong>blocksite address:</strong><br>",
dc_crime_clean$BLOCKSITEADDRESS
),
clusterOptions = markerClusterOptions()
)
})
}
shiny::runApp()
View(dc_crime_json)
dc_crime_json <- cbind(unlist(dccrimejsonlite$features$properties),unlist(dccrimejsonlite$features$geometry))
View(dc_crime_json)
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
View(dc_crime_json)
head(dc_crime_json)
shiny::runApp()
ls
ls('dc_')
ls(dc)
ls(`dc_`)
shiny::runApp()
View(dc_crime_clean)
shiny::runApp()
View(json)
View(json)
View(json)
shiny::runApp()
tbl_df(dc_crime_clean)
names(dc_crime_clean)
table(dc_crime_clean$OFFENSE)
plot(table(dc_crime_clean$OFFENSE))
table(dc_crime_clean$METHOD)
table(dc_crime_clean$VOTING_PRECINCT)
tbl_df(dc_crime_clean)
count(names(dc_crime_clean))
names(dc_crime_clean)
for(i in names(dc_crime_clean)){
x[i] <- lapply(names(dc_crime_clean), table)
}
x <- lapply(names(dc_crime_clean), table)
}
unlist(x)
for(i in names(dc_crime_clean)){
x <- lapply(names(dc_crime_clean), table)
}
lapply(names(dc_crime_clean), table)
sapply(names(dc_crime_clean), table)
sapply(dc_crime_clean, table)
x<-sapply(dc_crime_clean, table)
x$OBJECTID
drop(x)
for(i in x){
i <- x$i
}
b <- names(dc_crime_clean)
list2env(x,envir=.GlobalEnv)
rm(list = ls())
runApp()
runApp()
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
dccrimejsonlite <- fromJSON('http://opendata.dc.gov/datasets/dc3289eab3d2400ea49c154863312434_8.geojson')
## use cbind() combine  list elements and create dataframe
dc_crime_json <- cbind(dccrimejsonlite$features$properties,dccrimejsonlite$features$geometry)
## Get distinct Offenses for shiny input
offenses <- distinct(select(dc_crime_json,OFFENSE))
row.names(offenses) <- offenses$OFFENSE
## Seperate and clean lat/long columns
## --also separate REPORTDATETIME column
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T")
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
#Create date column from datetime
dc_crime_clean$DateClean <- as.Date(dc_crime_clean$Date)
head(dc_crime_clean)
names(dc_crime_clean)
sapply(dc_crime_clean, count)
n <- sapply(dc_crime_clean,unique)
n
n <- sapply(sapply(dc_crime_clean,unique),count)
n <- sapply(sapply(dc_crime_clean,unique),countn)
n <- sapply(sapply(dc_crime_clean,unique),n)
n <- sapply(sapply(dc_crime_clean,unique),count.fields)
n <- sapply(sapply(dc_crime_clean,unique),count)
n
k <- as.data.frame(unlist(n))
head(k)
View(k)
count(names(dc_crime_clean))
x<-sapply(dc_crime_clean, table)
x[2]
x[3]
x[4]
x[5]
names(x)
table(x)
table(x[i])
for(i in x){table(x[i])}
rm('i')
rm('k')
n$OBJECTID
j <- sapply(n,length)
j
j <- sort(j,dereasing = TRUE)
j <- sort(j,dereasing)
j <- sort(j,decreasing=TRUE)
j
View(j)
names(j) <- c('name','number')
View(j)
names(j)
rm('j')
j <- sapply(n,length)
j <- sort(j,decreasing=FASLE)
jdat <- as.data.frame(j)
View(jdat)
m <- as.POSIXlt(dc_crime_clean$Time)
m <- as.POSIXct(dc_crime_clean$Time)
m <- as.POSIXct(dc_crime_clean$START_DATE)
View(offenses)
m <- as.POSIXlt(dc_crime_clean$START_DATE)
m
clr()
rm('m')
View(jdat)
weekdays(dc_crime_clean$DateClean)
weekdays(dc_crime_json$REPORTDATETIME)
weekdays(as.date(dc_crime_json$REPORTDATETIME)
)
weekdays(as.Date(dc_crime_json$REPORTDATETIME))
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(REPORTEDATETIME))
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(REPORTDATETIME))
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",")%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)))
n$OFFENSE
n$DISTRICT
n$NEIGHBORHOODCLUSTER
ggplot(table(dc_crime_clean$OFFENSE))
library(rgdal)
library(ggplot2)
library(maptools)
library(dplyr)
library(ggmap)
library(leaflet)
library(dplyr)
library(jsonlite)
library(tidyr)
library(curl)
ggplot(table(dc_crime_clean$OFFENSE))
qplot(table(dc_crime_clean$OFFENSE))
qplot(table(dc_crime_clean$OFFENSE),bin=stat)
qplot(table(dc_crime_clean$OFFENSE),stat=bin)
off <- as.data.frame(table(dc_crime_clean$OFFENSE))
qplot(off,stat=bin)
qplot(off$Var1,off$Freq,stat=bin)
ggplot(off,aes(y=off$Freq,x=off$Var1))+geom_bar()
ggplot(off,aes(y=off$Freq,x=off$Var1,stat=bin))+geom_bar()
ggplot(off,aes(y=off$Var1,x=off$Freq))+geom_bar()
ggplot(off,aes(x=off$Freq))+geom_bar()
ggplot(off,aes(y=off$Var1))+geom_bar()
ggplot(off,aes(y=off$Var1,stat=bin))+geom_bar()
ggplot(off)+geom_bar()
ggplot(off$Var1,off$Freq)+geom_bar()
ggplot(off,aes(x=off$Var1))+geom_bar()
ggplot(off,aes(x=off$Var1,y=off$Freq))+geom_bar()
ggplot(off,aes(x=off$Var1,stat="identity"))+geom_bar()
ggplot(off,aes(x=off$Var1,stat=off$Freq))+geom_bar()
ggplot(off,aes(factor(Var1)))+geom_bar()
ggplot(off,aes(factor(Var1)))+geom_bar(stat=sum)
ggplot(off,aes(factor(Var1)))+geom_bar(stat="identity")
ggplot(off,aes(factor(Var1)))+geom_bar(stat="bin")
ggplot(off,aes(factor(Var1)))+geom_bar(stat="count")
ggplot(off,aes(factor(Var1)))+geom_bar(stat=Freq)
ggplot(off,aes(factor(Var1)))+geom_bar(stat=off$Freq)
ggplot(off,aes(factor(Var1)))+geom_bar(stat=as.numeric(off$Freq))
ggplot(off,aes(factor(Var1)))+geom_bar(stat=as.numeric(Freq))
qplot(off$Var1,off$Freq)+geom_bar()
qplot(off$Var1)+geom_bar(off$Freq)
qplot(off$Var1)+geom_bar()
mtcars
str(mtcars)
off$Freq <- as.numeric(off$Freq)
qplot(off$Var1)+geom_bar()
qplot(off$Var1,off$Freq)+geom_bar()
qplot(factor(Var1),data=off,geom="bar")
qplot(Var1, Freq, data=off, stat="identity",geom="bar")
qplot(Var1, sum(Freq), data=off, stat="identity",geom="bar")
qplot(Var1, sum(Freq), data=off, geom="bar")
qplot(Var1, data=off, geom="bar")
qplot(factor(dc_crime_clean$OFFESNSE), geom="bar")
qplot(factor(dc_crime_clean$OFFENSE), geom="bar")
qplot(factor(dc_crime_clean$OFFENSE), geom="bar")
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity")
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity")
off <- as.data.frame(table(dc_crime_clean$OFFENSE))
off$Freq <- as.numeric(off$Freq)
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + theme
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90,hjust=1)))
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90,hjust=1)))
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90,hjust=1))
ggplot(off, aes(y=factor(Var1),x=Freq)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=90,hjust=1))
ggplot(off, aes(y=factor(Var1),x=Freq)) + geom_bar(stat="identity")
ggplot(off, aes(y=factor(Var1),x=Freq)) + geom_bar(stat="identity") + coord_flip()
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + coord_flip()
off_levels <- names(off)[order(table(dc_crime_clean$OFFENSE))]
off$Var1 <- factor(dc_crime_clean$OFFENSE, levels= off_levels),
off$Var1 <- factor(dc_crime_clean$OFFENSE, levels= off_levels)
off$Var1 <- factor(off$Var1, levels= off_levels)
off$Var1 <- factor(off$Var1, levels= off_levels),
off$Var1 <- factor(off$Var1, levels= off_levels)
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + coord_flip()
off_levels <- names(off)[order(off)],
off <- arrange(off,desc(Freq))
off <- as.data.frame(table(dc_crime_clean$OFFENSE)),
off$Freq <- as.numeric(off$Freq),
off$Freq <- as.numeric(off$Freq)
off <- as.data.frame(table(dc_crime_clean$OFFENSE))
off$Freq <- as.numeric(off$Freq)
off <- arrange(off,desc(Freq))
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + coord_flip()
View(off)
off$Var1 <- reorder(off$Var1,off$Freq)
ggplot(off, aes(x=factor(Var1),y=Freq)) + geom_bar(stat="identity") + coord_flip()
ggplot(off, aes(x=factor(Var1),y=Freq))
+ geom_bar(stat="identity")
+ coord_flip()
+ geom_text(aes(label = off$Freq), size = 3, hjust = 0.5, vjust = 3)
ggplot(off, aes(x=factor(Var1),y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
geom_text(aes(label = off$Freq), size = 3, hjust = 0.5, vjust = 3)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(off, aes(x=factor(Var1),y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
geom_text(aes(label = off$Freq), size = 3, hjust = 0.5, vjust = 3)
)
output$plot1 <- renderPlot(
off <- as.data.frame(table(dc_crime_clean$OFFENSE)),
off$Freq <- as.numeric(off$Freq),
off$Var1 <- reorder(off$Var1,off$Freq),
ggplot(off, aes(x=factor(Var1),y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
geom_text(aes(label = off$Freq), size = 3, hjust = 0.5, vjust = 3)
)
off <- as.data.frame(table(dc_crime_clean$OFFENSE)),
off$Freq <- as.numeric(off$Freq),
off$Var1 <- reorder(off$Var1,off$Freq),
ggplot(off, aes(x=factor(Var1),y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
geom_text(aes(label = off$Freq), size = 3, hjust = 0.5, vjust = 3)
runApp()
runApp()
ggplot(off, aes(x=Var1,y=Freq)) +
geom_bar(stat="identity") +
coord_flip() +
geom_text(aes(label = off$Freq), size = 3, hjust = 0.5, vjust = 3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
dc_crime_clean <- dc_crime_json %>%
separate(coordinates, into = c("X", "Y"), sep = ",", remove = FALSE)%>%
separate(REPORTDATETIME, into = c("Date","Time"), sep="T", remove = FALSE)%>%
mutate(Weekday = weekdays(as.Date(REPORTDATETIME)))
runApp()
dc_crime_filtered <- filter(dc_crime_clean, coordinates == input$mymap_bounds)
runApp()
runApp()
runApp()
class(dc_crime_clean$X)
## convert lat and long columns to numbers and remove non numeric characters
dc_crime_clean$X <- as.numeric(gsub("c\\(","",dc_crime_clean$X))
dc_crime_clean$Y <- as.numeric(gsub("\\)","",dc_crime_clean$Y))
runApp()
runApp()
runApp()
runApp()
dc_crime_filtered <- subset(dc_crime_clean,
X >= latRng[1] & X <= latRng[2] &
Y >= lngRng[1] & Y <= lngRng[2])
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?fluidPage
names(dc_crime_clean)
tabl_df(dc_crime_clean)
tbl_df(dc_crime_clean)
tbl_df(dc_crime_clean)
View(head(dc_crime_clean))
count(distinct(dc_crime_clean$DISTRICT))
count(unique(dc_crime_clean$DISTRICT))
count_n()
distinct(dc_crime_clean$DISTRICT)
unique(dc_crime_clean$DISTRICT)
n()
n_distinct(dc_crime_clean$DISTRICT)
n_distinct(dc_crime_clean$NEIGHBORHOODCLUSTER)
n_distinct(dc_crime_clean$BLOCK_GROUP)
sapply(dc_crime_clean,n_distinct)
lapply(dc_crime_clean,n_distinct)
sapply(dc_crime_clean, distinct)
sapply(dc_crime_clean, unqiue)
sapply(sapply(dc_crime_clean, unique),length)
runApp()
runApp()
?dataTableOutput
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(off) <- c("OFFENSE","COUNT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?library
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?element_text
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
day <- as.data.frame(table(filterData()$Weekday))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
day <- filterData %>%
select(Weekday, OFFENSE) %>%
group_by(Weekday) %>%
summarize(count = n_count())
runApp()
runApp()
